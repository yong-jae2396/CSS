
-- 선택자 (Selector) --
1. class 선택자 : 일정한 태그에 속성을 부여하는 선택자 // 사용법 (body : class = "test", .test)
2. id 선택자 : CCS를 주고 싶은 문단에 id값을 주어 id값을준 문단에 속성을 부여하는 선택자 // 사용법 :(body : id = "test", style : #test)
3. > 기호를 사용하면 선택한것에 첫번째로 속해져 있는것들에게만 속성을 부여 // 사용법 = (ol > li : ol 바로밑에있는 li 한테 속성을 부여하라는 뜻)
4. , 기점으로 여러개에 태그에 동시에 속성을 부여 할 수 있다. // 사용법 : ( ol, ui {color : blue;} )
5. 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- Pseudo class Selector(가상 클래스 선택자) --
## 쓰는 순서는 1번 ~ 6번 순서로 사용한다.
1. :link = 방문한 적이 있는 링크
2. :visited = 방문한 적이 있는 링크  
3. :hover = 마우스를 롤오버 했을 때
4. :active = 마우스를 클릭했을 때
5. :focus = 포커스가 맞춰졌을 때(TAB)

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- 여러선택자들 --
1. : first-child =  첫번째자식 요소 선택
2. : only-child = 하나만 소속되어있는 요소 선택

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- 타이포그래피 --
1. font-size
   font의 단위 (* REM 사용권장)
   - PX = 모니터 상의 화소 하나의 크기에 대응되는 단위이다. 고정된 값이기 때문에 이해하기 쉽지만, 사용자가 글꼴크기를 조정할 수 없어 권장 X 
   - REM = html 태그에 적용된 font-size의 영향을 받음, html에 폰트 크기에 따라 상대적으로 커져 이해하기 쉬움 권장 O
   - EM = 부모 태그의 영향을 받는 상대적인 크기이다. 부모 크기에 영향을 받기 때문에 파악하기 어려움 사용 권장 X
   
2. color 
   color 사용법  
    - RGB = Red, Green, Blue 색을 섞어 사용한다 // 예 : RGB(255,255,255)
    - name = color를 name을 사용하여 사용한다 // 예 :  red
    - HEX = 16진수를 사용하여 color를 표현 // 예 :  #FF0000
    
3. text-align
    align 사용법
     - left = 왼쪽 정렬
     - right = 오른쪽 정렬
     - center = 가운데 정렬
     - justify = 양쪽 균등이 분등
     
 4. font // 예)  font : bold 5rem/ 2 arial, verdana, serif;  * 이런식으로 함축해서 사용한다.
     - font-family = 서체를 지정하는 속성 (속성이 앞에부터 순서대로 있는게 있으면 그 것을 부여한다.)
        * serif : 폰트에 장식을 부여하는 것
        * sans-serif : 폰트에 장식을 부여하지 않는 것
        * cursive : 폰트에 흘림체 부여하는 것
        * monospace : 고정폭을 주는 것
     - font-weight = 폰트에 두께를 나타낸다.
        * bold : 폰트를 두껍게 한다.
     - line-height = 행과 행 사이의 간격의 지정한다. 기본 값은 normal로 수치로는 1.2이다 
                    이수치는 1.2배만큼 간격을 준다는 의미이다.
  5. web font 
     - goole fonts 등등 사이트에서 font를 다운받아서 폰트를 웹에 적용시킬 수 있다.
     - @font-face를 사용하여 외부 font를 이름을 지정하면  font-family를 통하여 적용시킬 수 있다.
       * 이름적용 : @font-face {font-family : 'font';}
       * 사용법 : font-family : 'font' 
 ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
 -- 조화 --
 
 1. 상속 (inheritance) : 부모 엘리먼트의 속성을 자식 엘리먼트가 그대로 부여 받는 것
    - 하지만 모든 속성이 상속이 되는 것은 아니다. 

 2. stylish
    사용자가 접속하는 웹사이트를 직접 꾸미거나 다른 사용자들이 올려놓은 디자인을 적용하여 
    웹사이트 자체 디자인을 바꾸는 기술(https://userstyles.org/)
    
 3. cascading
    - cascading 순서
      내부 style > id selector > class selector > tag selector
    -  !important :  이것을 코드 뒤에 적용하면 그 코드가 cascading 순서를 무시하고 최우선으로 적용된다.
                    (좋은방법은 아니다. 우선순위를 잘활용하는 것이 좋다.)
                    
 ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  
 -- 레이아웃 --
 
  # 레이아웃 성장 배경 
       1. TABLE를 사용하여 레이아웃을 잡았다 (문제점 : 복잡하고 코드양도 많아서 변경이 어려움)
       2. POSTION을 통해서 각각의 엘리먼트를 적당한 위치에 옮겨넣어 사용
       3. FLOAT를 사용하여 레이아웃을 잡음 (문제점 : 이해하기 어렵고 레이아웃 자체를 위해서 개발된거라고 보긴 어려움)
       4. FLEX
  
 1. block element
    - 화면 전체를 차지하는 태그
 2. inline level element
    - 화면의 태그 크기 만큼만 차지하는 태그
 * display 속성을 사용하여 block, inline을 바꿀수 있다.
 
 3. Box Moldel
    - padding : 내용과 요소사이의 간격
    - margin : element와 element의 간격
      * margin : auto를 사용할 경우 왼쪽과 오른쪽이 공평하게 분할되면서 화면 가운데에 위치하게 된다.
    - border
      * top, button, right, left등을 이용하여 방향을 지정하여 값을 줄 수 있다.
    - Box Moldel은 폭을 계산할 때 테두리를 포함한다.
 
 4. 마진겹침 현상
    - 마진겹침은 큰 값을 기준으로 간격이 생긴다. 
    - 부모엘리먼트가 시각적요소가 없는 투명한 상태일때는 부모엘리먼트와 자식엘리먼트에 마진값중 큰값이 자식엘리먼트에 위치로 적용된다.
    - 어떤태그의 시각적요소가 없는 투명한 상태일때 마진값은 가지고 있는 마진값중 가장 큰 값을 가진다. 
    
 5. 포지션
    - 오프셋(left, right, top, bottom)
      * left > rignt : left 와 right가 동시에 있는 경우
      * top > bottom: bottom 와 top가 동시에 있는 경우
      
    - static (부모에고정)
      * 오프셋 값을 무시
    - reiative (부모를 기준으로 이동) 
      * 상대적
      * 오프셋 값이 부모를 기준으로 움직임
    - absolute (부모를 무시)
      * 오프셋 값을 주지않으면 부모를 기준으로 기본 위치가 지정된다.
      * 부모태그의 포지션이 static이 아닌 값이 나올때 까지 무시하다가 static이 아닌 포지션이 나오면 그것을 기준으로 위치가 지정됨
      * absolute를 포지션으로 줄 경우 부모와 관계가 끊기기 때문에 상속을 받지않고 크기가 자기 content 크기가 된다.
        부모역시도 자식과 관계가 끊겼기 때문에 자기 크기만해 진다.
    - fixed (스크롤에서 독립적으로 자기 위치가 고정)
      * fixed를 사용할 경우 부모와 관계가 끊기기 떄문에 부모 엘리먼트는 자식 엘리먼트의 크기를 포함하지 않는다.
        자식 엘리먼트 역시 부모와 관계가 끊기기 때문에 크기가 자기 content 크기만큼 된다.
        
  6. float
    - 본문에다가 이미지를 삽입하기 위해 도입된 속성
    - 오프셋 값으로 이미지와 겹치지 않게 위치를 지정할 수 있다.
    - 레이아웃 잡을때 많이 사용
    - 자신이 위치 할 수 없는 상황이 오면 밑으로 내려간다는 속성이 있다.
      * 예) flaot : right;
    - clear
      * 예) clear : both;
      * 본문의 both 값을 사용하면 float값으로 인해 img를 피해가는 것을 무시하고 자신의 위치를 고수 할 수 있다. 
      
  7. Box-sizing
     - 기본적으로 width의 값 지정은 content의 크기를 지정한다.
     
     - content-box
       * content를 기준으로 크기를 지정
     - border-box
       * border를 기준으로 크기를 지정
       
  8. FLEX
     - 레이아웃을 매우 효과적으로 표현할수 있는 속성
     -  
 
 
 
